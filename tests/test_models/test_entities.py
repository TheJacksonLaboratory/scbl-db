from pathlib import Path

from pytest import mark, raises

from scbl_db.models.entities import Institution, Lab, Person

from .fixtures import delivery_parent_dir, institution, person


# TODO: add more tests for each possible error
class TestInstitution:
    """
    Tests for the `Institution` model.
    """

    ror_id = '02der9h97'
    email_format = '{first_name}.{last_name}@uconn.edu'

    def test_ror_id_no_info(self):
        """
        Test that given a correct ROR ID, the model retrieves and sets
        sets the correct data from ROR.
        """
        institution = Institution(ror_id=self.ror_id, email_format=self.email_format)

        assert institution.ror_id == self.ror_id
        assert institution.email_format == self.email_format
        assert institution.name == 'University of Connecticut'
        assert institution.short_name == 'UConn'
        assert institution.country == 'US'
        assert institution.state == 'CT'
        assert institution.city == 'Storrs'

    def test_ror_id_with_info(self):
        """
        Test that given a correct ROR ID and user-given data, the model
        does not overwrite the user-given data.
        """
        name = 'Institution'
        short_name = 'INST'
        institution = Institution(
            ror_id=self.ror_id,
            email_format=self.email_format,
            name=name,
            short_name=short_name,
        )

        assert institution.name == name
        assert institution.short_name == short_name

    def test_nonexistent_ror_id(self):
        """
        Test that given a nonexistent ROR ID, the `Institution` model
        throws an error.
        """
        with raises(ValueError):
            Institution(ror_id='nonexistent_ror-id', email_format=self.email_format)

    def test_email_format_invalid_attribute(self):
        """
        Test that given an incorrect email format, the `Institution`
        model throws an error.
        """
        with raises(ValueError):
            Institution(
                ror_id=self.ror_id, email_format=r'{non_existent_attribute}@jax.org'
            )

    def test_email_format_no_variables(self):
        with raises(ValueError):
            Institution(ror_id=self.ror_id, email_format=r'contant_email@jax.org')


class TestPerson:
    """
    Tests for the `Person` model.
    """

    @mark.parametrize(argnames='n_dashes_to_remove', argvalues=range(1, 4))
    def test_orcid(self, institution: Institution, n_dashes_to_remove: int):
        """
        Test that the `Person` model accepts the ORCID, regardless of
        the number of dashes.
        """
        orcid = '0009-0008-3754-6150'
        person = Person(
            first_name='Ahmed',
            last_name='Said',
            orcid=orcid.replace('-', '', n_dashes_to_remove),
            institution=institution,
        )

        assert person.orcid == orcid

    def test_invalid_orcid(self, institution: Institution):
        """
        Test that the `Person` model raises error with invalid ORCID.
        """
        with raises(ValueError):
            Person(
                first_name='Ahmed',
                last_name='Said',
                orcid='invalid-orcid',
                institution=institution,
            )

    def test_nonexistent_orcid(self, institution: Institution):
        """
        Test that the `Person` model raises error with nonexistent ORCID.
        """
        with raises(ValueError):
            Person(
                first_name='Ahmed',
                last_name='Said',
                orcid='9999-9999-9999-9999',
                institution=institution,
            )

    def test_email_autogenerated(self, institution: Institution):
        """
        Test that the `Person` model sets the email_auto_generated attribute
        to False when the email is given.
        """
        person = Person(
            first_name='Ahmed',
            last_name='Said',
            institution=institution,
            email='ahmed.said@jax.org',
        )
        assert not person.email_auto_generated

    def test_autoset_email(self, institution: Institution):
        """
        Test that the `Person` model correctly sets the email attribute
        when given the minimum required information.
        """
        # Initialize a Person with a last name with a space
        person = Person(
            first_name='Ahmed', last_name='Said Alaani', institution=institution
        )

        assert person.email == f'ahmed.saidalaani@jax.org'
        assert person.email_auto_generated


class TestLab:
    """
    Tests for the `Lab` model.
    """

    def test_autoset_name(
        self, delivery_parent_dir: Path, institution: Institution, person: Person
    ):
        """
        Test that the `Lab` model correctly sets the `name` attribute when
        given the minimum required information.
        """
        (delivery_parent_dir / 'ahmed_said').mkdir()
        lab = Lab(institution=institution, pi=person)

        assert lab.name == 'Ahmed Said Lab'

    def test_autoset_delivery_dir(
        self, delivery_parent_dir: Path, institution: Institution, person: Person
    ):
        """
        Test that the `Lab` model correctly sets the `delivery_dir` and
        unix group automatically
        """
        (delivery_parent_dir / 'ahmed_said').mkdir()
        lab = Lab(institution=institution, pi=person)

        assert lab.delivery_dir == str(delivery_parent_dir / f'ahmed_said')
        assert lab.unix_group == 'test_group'

    def test_invalid_delivery_dir(
        self, delivery_parent_dir: Path, institution: Institution, person: Person
    ):
        """
        Test that the `Lab` model raises an error when given an invalid
        delivery directory.
        """
        with raises(NotADirectoryError):
            Lab(institution=institution, pi=person, delivery_dir='invalid-directory')

    def test_nonexistent_autoset_delivery_dir(
        self, delivery_parent_dir: Path, institution: Institution, person: Person
    ):
        """
        Test that the `Lab` model raises an error when the delivery
        directory is automatically set and does not exist.
        """
        with raises(NotADirectoryError):
            Lab(institution=institution, pi=person)
